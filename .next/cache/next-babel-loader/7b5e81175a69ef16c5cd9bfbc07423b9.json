{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(commenting),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchCommenting),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootComment);\n\nimport { fork, all, takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport '../reducers/post/postAction';\nimport { POST_RECOMMEND_PRODUCT_REQUEST, POST_RECOMMEND_PRODUCT_FAILURE, POST_RECOMMEND_PRODUCT_SUCCESS } from '../reducers/product/productAction';\nimport { POST_COMMENT_FAILURE, POST_COMMENT_REQUEST, POST_COMMENT_SUCCESS } from '../reducers/comment/commentAction';\n\nfunction recommendAPI(data) {\n  return axios.post('https://stopgomin-backend.herokuapp.com/api/', _JSON$stringify(data));\n}\n\nfunction commenting(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function commenting$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(recommendAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          //api\n          put({\n            type: POST_COMMENT_SUCCESS,\n            data: result\n          });\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          put({\n            type: POST_COMMENT_FAILURE,\n            data: _context.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchCommenting() {\n  return _regeneratorRuntime.wrap(function watchCommenting$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(POST_COMMENT_REQUEST, commenting);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function rootComment() {\n  return _regeneratorRuntime.wrap(function rootComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchCommenting)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/webdev/8ton14_front/sagas/comment.js"],"names":["commenting","watchCommenting","rootComment","fork","all","takeLatest","call","put","axios","POST_RECOMMEND_PRODUCT_REQUEST","POST_RECOMMEND_PRODUCT_FAILURE","POST_RECOMMEND_PRODUCT_SUCCESS","POST_COMMENT_FAILURE","POST_COMMENT_REQUEST","POST_COMMENT_SUCCESS","recommendAPI","data","post","action","result","type","console","error"],"mappings":";;;;;yBAYUA,U;;;yBAgBAC,e;;;yBAIeC,W;;AAhCzB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAgB,6BAAhB;AACA,SAASC,8BAAT,EAAyCC,8BAAzC,EAAyEC,8BAAzE,QAA+G,mCAA/G;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,EAAqDC,oBAArD,QAAiF,mCAAjF;;AAGA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAOR,KAAK,CAACS,IAAN,CAAW,8CAAX,EAA2D,gBAAeD,IAAf,CAA3D,CAAP;AACH;;AAED,SAAUhB,UAAV,CAAqBkB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMZ,IAAI,CAACS,YAAD,EAAeG,MAAM,CAACF,IAAtB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAE6D;AACrDZ,UAAAA,GAAG,CAAC;AACAa,YAAAA,IAAI,EAAEN,oBADN;AAEAE,YAAAA,IAAI,EAAEG;AAFN,WAAD,CAAH;AAHR;AAAA;;AAAA;AAAA;AAAA;AAQQE,UAAAA,OAAO,CAACC,KAAR;AACAf,UAAAA,GAAG,CAAC;AACAa,YAAAA,IAAI,EAAER,oBADN;AAEAI,YAAAA,IAAI;AAFJ,WAAD,CAAH;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUf,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACQ,oBAAD,EAAuBb,UAAvB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACND,IAAI,CAACF,eAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { fork, all, takeLatest, call, put } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\n\r\nimport { } from '../reducers/post/postAction'\r\nimport { POST_RECOMMEND_PRODUCT_REQUEST, POST_RECOMMEND_PRODUCT_FAILURE, POST_RECOMMEND_PRODUCT_SUCCESS } from '../reducers/product/productAction'\r\nimport { POST_COMMENT_FAILURE, POST_COMMENT_REQUEST, POST_COMMENT_SUCCESS } from '../reducers/comment/commentAction'\r\n\r\n\r\nfunction recommendAPI(data) {\r\n    return axios.post('https://stopgomin-backend.herokuapp.com/api/', JSON.stringify(data))\r\n}\r\n\r\nfunction* commenting(action) {\r\n    try {\r\n        const result = yield call(recommendAPI, action.data) //api\r\n        put({\r\n            type: POST_COMMENT_SUCCESS,\r\n            data: result\r\n        })\r\n    } catch (e) {\r\n        console.error(e)\r\n        put({\r\n            type: POST_COMMENT_FAILURE,\r\n            data: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchCommenting() {\r\n    yield takeLatest(POST_COMMENT_REQUEST, commenting)\r\n}\r\n\r\nexport default function* rootComment() {\r\n    yield all([\r\n        fork(watchCommenting),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}