{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { fork, all, takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_FAILURE, USER_LOGIN_SUCCESS } from '../reducers/user/userAction';\n\nfunction login() {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: USER - USER_LOGIN_SUCCESS,\n            data: result.data\n          });\n\n        case 3:\n          result = _context.sent;\n          _context.next = 11;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 11;\n          return put({\n            type: USER_LOGIN_FAILURE,\n            data: _context.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(USER_LOGIN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/webdev/8ton14_front/sagas/user.js"],"names":["login","watchLogin","userSaga","fork","all","takeLatest","call","put","axios","USER_LOGIN_REQUEST","USER_LOGIN_FAILURE","USER_LOGIN_SUCCESS","type","USER","data","result","console","error"],"mappings":";;;;yBAMUA,K;;;yBAgBAC,U;;;yBAIeC,Q;;AA1BzB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,kBAAjD,QAA2E,6BAA3E;;AAGA,SAAUX,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGY,iBAAMO,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEC,IAAI,GAAGF,kBADP;AAENG,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAHZ;AAEcC,UAAAA,MAFd;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQC,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMV,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEF,kBADA;AAENI,YAAAA,IAAI;AAFE,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACI,kBAAD,EAAqBT,KAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,EAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { fork, all, takeLatest, call, put } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\n\r\nimport { USER_LOGIN_REQUEST, USER_LOGIN_FAILURE, USER_LOGIN_SUCCESS } from '../reducers/user/userAction'\r\n\r\n\r\nfunction* login() {\r\n    try {\r\n        const result = //api 요청\r\n            yield put({\r\n                type: USER - USER_LOGIN_SUCCESS,\r\n                data: result.data\r\n            })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: USER_LOGIN_FAILURE,\r\n            data: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(USER_LOGIN_REQUEST, login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([])\r\n}"]},"metadata":{},"sourceType":"module"}