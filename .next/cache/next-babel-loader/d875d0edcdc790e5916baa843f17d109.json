{"ast":null,"code":"import { fork, all, takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_FAILURE, USER_LOGIN_SUCCESS } from '../reducers/user/userAction';\n\nfunction* login() {\n  try {\n    const result = false; //api 요청\n\n    yield put({\n      type: USER - USER_LOGIN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: USER_LOGIN_FAILURE,\n      data: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(USER_LOGIN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([]);\n}","map":{"version":3,"sources":["D:/webdev/8ton14_front/sagas/user.js"],"names":["fork","all","takeLatest","call","put","axios","USER_LOGIN_REQUEST","USER_LOGIN_FAILURE","USER_LOGIN_SUCCESS","login","result","type","USER","data","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,kBAAjD,QAA2E,6BAA3E;;AAGA,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMC,MAAM,GAAG,KAAf,CADA,CACqB;;AACrB,UAAMN,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAEC,IAAI,GAAGJ,kBADP;AAENK,MAAAA,IAAI,EAAEH,MAAM,CAACG;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMV,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAEJ,kBADA;AAENM,MAAAA,IAAI,EAAEC;AAFA,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUG,UAAV,GAAuB;AACnB,QAAMf,UAAU,CAACI,kBAAD,EAAqBG,KAArB,CAAhB;AACH;;AAED,eAAe,UAAUS,QAAV,GAAqB;AAChC,QAAMjB,GAAG,CAAC,EAAD,CAAT;AACH","sourcesContent":["import { fork, all, takeLatest, call, put } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\n\r\nimport { USER_LOGIN_REQUEST, USER_LOGIN_FAILURE, USER_LOGIN_SUCCESS } from '../reducers/user/userAction'\r\n\r\n\r\nfunction* login() {\r\n    try {\r\n        const result = false //api 요청\r\n        yield put({\r\n            type: USER - USER_LOGIN_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: USER_LOGIN_FAILURE,\r\n            data: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(USER_LOGIN_REQUEST, login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([])\r\n}"]},"metadata":{},"sourceType":"module"}